import * as React from 'react';
import {RecoilRoot} from 'recoil';
import {Counter} from "./Counter";

export const Recoil = () => (
  <div>
    <h1>Recoil</h1>
    <RecoilRoot>
      <Counter/>
    </RecoilRoot>
    <p>
      MINIFIED - 78kB,
      MINIFIED + GZIPPED - 23kB,
      tree-shakeable,
      1 dependency
    </p>
    <p>
      Необходима обёртка RecoilRoot. Создаем атом - атом представляет часть состояния.
      Атомы могут быть прочитаны и записаны из любого компонента.
      Для работы со стейтом используется useRecoilState.
      В документации логика и изменение стейта делается прямо в компоненте.
      Пришлось писать кастомный хук, чтобы это пофиксить и не писать логику в компоненте.
      Также есть selector для трансформации state. (Полагаю аналог библиотеки Reselect).
      Для чтения данных из селекторов используется хук useRecoilValue.
    </p>
    <p>
      Experimental, поэтому я бы с осторожностью относился к этой библиотеке.
      Работает только с React.
      Часть хуков и функций с постфиксом "UNSTABLE()".
      Recoil предоставляет хуки для получения снимков на основе текущего состояния.
      В разделе Dev-tools есть нотификация что API в настоящее время находится в разработке и будет изменен.
      Дополнительно есть библиотека recoil-relay помогает Recoil выполнять безопасные и эффективные запросы с
      использованием GraphQL с библиотекой Relay.
    </p>
    <hr/>
  </div>
);
